ui <- bootstrapPage(
tags$style(type = "text/css", "html,
body {width:100%;height:100%}"),
leafletOutput("mymap", width= "100%", height = "100%"),
# Absolute panel will house the user input widgets
# Div tag is used to add styling to absolute panel
absolutePanel(top = 10, right = 10, fixed = TRUE,
tags$div(style = "opacity: 0.70; background: #FFFFEE; padding: 8px; ",
helpText("Welcome to the World map")
)
)
)
## End of ui code
## R Shiny server code begins here
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
# Create the map data and add ploygons to it
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
})
# Zoom and set the view after click on state shape
# input$mymap_shape_click will be NULL when not clicked initially to any shape
# input$mymap_shape_click will have the ID, lat and lng corresponding to the shape clicked
observe(
{  click = input$mymap_shape_click
if(is.null(click))
return()
else
leafletProxy("mymap") %>%
setView(lng = click$lng , lat = click$lat, zoom = 7)
}
)
}
shinyApp(ui, server)
runApp('shiny_chloropleth_leaflet.R')
click$.nonce
clickOpts()
states
states$name
head(state,2)
head(states,2)
states[2,c("name")]
states$name[1]
states$name[2]
states[1,"name"]
states[["name"]]
states[[c("name","id")]]
Q
states[["name"]]
states[["id"]]
runApp('shiny_chloropleth_leaflet.R')
input$mymap_click$lat
states$density
sort(states$density)
states
states[[52]]
states[52]
states[[2]]
states[[3]]
states[[4]]
Q
states\
states
names(states)
typeof(states)
states[[2]]
states[,]
states$density
typeof(states)
as.data.frame(states)
df <- as.data.frame(states)
df$density
states
data <- states
first_polygon <- data[[1]]
coords <- first_polygon@coords
states@polygons
states@polygons@coords
states@coords
states@polygons@coords[[1]]
states@polygons[[1]]
states@polygons[[1]]@Polygons
states@polygons[[1]]@Polygons@coords
states@polygons[[1]]@Polygons
states@polygons[[1]]@Polygons[1]
states@polygons[[1]]@Polygons[4]
states@polygons[[1]]@Polygons[3]
states@polygons[[1]]@Polygons[2]
states@polygons[[1]]@Polygons[[1]]
states@polygons[[1]]@Polygons[[1]]@coords
states@polygons[[1]]
states@polygons[[1]]@labpt
states@polygons[[52]]@labpt
states$name
states@polygons[[1]]@labpt
runApp('shiny_chloropleth_leaflet.R')
click$lat
click$long
click$lon
click$lng
states@polygons[[2]]@labpt
states@polygons[[]]@labpt
states@polygons[1:52]@labpt
states@polygons[,1:52]@labpt
states@polygons[1:2]@labpt
states@polygons[c(1:3)]@labpt
states@polygons@labpt
states@polygons[10]@labpt
states@polygons[1]@labpt
states@polygons[[1]]@labpt
states@polygons
states@polygons[1:5]
as.dataframe(states@polygons[1:5])
as.data.frame(states@polygons[1:5])
states@polygons[1:52]
states@polygons[1:52][
"ID"
]
#### global.r contents
library(shiny)# life is dull without this
library(tidyverse)# makes things tidy
library(readxl) # to read source data file
library(shinydashboard) # for layout
library(leaflet) # for map
library(leaflet.providers) # to load OpenStreet Map
library(raster) # for map
data <- getData(“GADM”, country= “IND”, level=1)
data <- read_excel("data/coal_data.xlsx")
data <- read_excel("coal_data.xlsx")
head(dataa)
head(data)
names(data)
data <- read_excel("coal_data.xlsx")
head(data)
names(data)
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by(Owner_name)
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by("Coal Mine Owner Name")
owner_avg
nrow(data)
nrow(owner_avg)
typeof(owner_avg)
typeof(data)
names(owner_avg)
name(data)
names(data)
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by("Coal Mine Owner Name") %>%
summarise(production_permine = round(mean("Coal/ Lignite Production (MT) (2019-2020)"),1))
data$`Coal/ Lignite Production (MT) (2019-2020)`
typeof(data$`Coal/ Lignite Production (MT) (2019-2020)`)
mean(data$`Coal/ Lignite Production (MT) (2019-2020)`)
names(owner_avg)
owner_avg$production_permine
owner_avg <- data %>% group_by("Coal Mine Owner Name")
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by("Coal Mine Owner Name") %>%
summarise(production_permine = round(mean(`Coal/ Lignite Production (MT) (2019-2020)`),1))
owner_avg$production_permine
owner_avg
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by(`Coal Mine Owner Name`) %>%
summarise(production_permine = round(mean(`Coal/ Lignite Production (MT) (2019-2020)`),1))
owner_avg
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by(`Coal Mine Owner Name`) %>%
summarise(production_permine = round(mean(`Coal/ Lignite Production (MT) (2019-2020)`),1)) %>%
arrange(desc(production_permine)) %>% slice(1:10)
names(data)
dist_avg <- data %>% group_by(District_Name) %>%
summarise(production_perdistrict = round(sum(`Coal/ Lignite Production (MT) (2019-2020)`),1))%>%
arrange(desc(production_perdistrict)) %>% slice(1:10)
dist_avg <- data %>% group_by(`District Name`) %>%
summarise(production_perdistrict = round(sum(`Coal/ Lignite Production (MT) (2019-2020)`),1))%>%
arrange(desc(production_perdistrict)) %>% slice(1:10)
dist_avg
owner_avg
names(data)
# DATA FOR THE MAP:
data2 <- data %>% select(`State/UT Name`, `District Name`, `Coal/ Lignite Production (MT) (2019-2020)`) %>%
group_by(`State/UT Name`) %>%
summarise(production_perstate = round(sum(`Coal/ Lignite Production (MT) (2019-2020)`),1))
IND_3 <- getData("GADM", country= "IND", level=1)
install.packages("raster")
library(raster) # for map
IND_3 <- getData("GADM", country= "IND", level=1)
packageVersion("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
packageVersion("Rcpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
#### global.r contents
library(shiny)# life is dull without this
library(tidyverse)# makes things tidy
library(readxl) # to read source data file
library(shinydashboard) # for layout
library(leaflet) # for map
library(leaflet.providers) # to load OpenStreet Map
library(raster) # for map
library(sf) # for map
data <- read_excel("coal_data.xlsx")
# DATA TRANSFORMATIONS (data for the Bar Charts):
owner_avg <- data %>% group_by(`Coal Mine Owner Name`) %>%
summarise(production_permine = round(mean(`Coal/ Lignite Production (MT) (2019-2020)`),1)) %>%
arrange(desc(production_permine)) %>% slice(1:10)
dist_avg <- data %>% group_by(`District Name`) %>%
summarise(production_perdistrict = round(sum(`Coal/ Lignite Production (MT) (2019-2020)`),1))%>%
arrange(desc(production_perdistrict)) %>% slice(1:10)
# DATA FOR THE MAP:
data2 <- data %>% dplyr::select(`State/UT Name`, `District Name`, `Coal/ Lignite Production (MT) (2019-2020)`) %>%
group_by(`State/UT Name`) %>%
summarise(production_perstate = round(sum(`Coal/ Lignite Production (MT) (2019-2020)`),1))
data2 <- data2 %>%
mutate("NAME_1" = `State/UT Name`)
# DOWNLOAD MAP COORDINATES FROM GADM:
IND_3 <- getData("GADM", country= "IND", level=1)
# Level 1 means States, Level 2 would be Districts
IND_1 <- merge(IND_3, data2,
by.x = c("NAME_1"), by.y = c("NAME_1"),
all.x = TRUE)
ind_2 <- IND_1[IND_1$NAME_1 %in% data2$`State/UT Name`, ]
# DEFINING COLOR PALETTE FOR MAP TILES. Using Black/grey color palette which correlates with color of coal
pal <- colorNumeric(
palette = c("#e0e0e0", "#000000"),
domain = ind_2$production_perstate) #Tiles would be colored based on production_perstate values
runApp()
click$lat
click$lat
data
data[, "Latitude"==27.55095]
data[, "Latitude"==27.55]
data[, all.equal (data$Latitude, 27.55)]
data[, all.equal(data$Latitude, 27.55)]
all.equal(data$Latitude, 27.55)
data$Latitude == 27.55
all.equal(data$Latitude, rep(27.55,nrow(data)))
rep(27.55,nrow(data))
all.equal(data$Latitude, rep(27.55,nrow(data)))
data[, data$Latitude==27.55095]
data[data$Latitude==27.55095,]
data[data$Latitude==27.55095,]
data %>% filter(near(Latitude, 27.55095))
data %>% filter(near(Latitude, 27))
data
data$Latitude
data %>% filter(near(Latitude, 27.5))
near(data$Latitude, 27.5)
near(data$Latitude, 27.5) == T
round(data$Latitude,1)
round(data$Latitude,1) == 27.5
round(data$Latitude,1) == 27.55
round(data$Latitude,2) == 27.55
round(data$Latitude,1) == 27.5
data[round(data$Latitude,1) == 27.5,]
runApp()
click$lat
data[round(data$Latitude,1) == 27.4,]
data[`State/UT Name`=="Uttar Pradesh",]
data[data$`State/UT Name`=="Uttar Pradesh",]
runApp()
input$myMap_center
data[data$`State/UT Name`=="Telangana",]
input$myMap_shape_mouseout
input$sidebarCollapsed
input$myMap_zoom
input$myMap_bounds
ind_2$
ind_2
runApp()
runApp()
input$myMap_shape_click
click
click
click
runApp()
runApp()
runApp()
click
click$lat
data[round(data$Latitude,1) == 11.5,]
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = us_states, fillOpacity = 0.5)
library(spData)
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = us_states, fillOpacity = 0.5)
# Add a drilldown control to the map
usa_map %>%
addControl(
type = "action",
icon = icon("fa-angle-down"),
title = "Drill Down",
action = function(e) {
leafletProxy(e$map) %>%
setView(e$latlng, zoom = 10)
}
)
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = us_states, fillOpacity = 0.5)
# Add a drilldown control to the map
usa_map %>%
addControl(
type = "action",
action = function(e) {
leafletProxy(e$map) %>%
setView(e$latlng, zoom = 10)
}
)
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles()
# Add a layer to the map
usa_map %>%
addPolygons(data = us_states, fillOpacity = 0.5)
# Add a drilldown control to the map
usa_map %>%
addControl(
type = "action",
icon = icon("fa-angle-down"),
title = "Drill Down",
action = function(e) {
leafletProxy(e$map) %>%
setView(e$latlng, zoom = 10)
}
)
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = us_states, fillOpacity = 0.5)
# Add a drilldown control to the map
usa_map %>%
addControl(
action = function(e) {
leafletProxy(e$map) %>%
setView(e$latlng, zoom = 10)
}
)
runApp('shiny_chloropleth_leaflet.R')
library(leaflet)
# Create a leaflet map of the United States
usa_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = us_states, fillOpacity = 0.5)
# Add a drilldown control to the map
usa_map %>%
addControl(
type = "action",
icon = icon("fa-angle-down"),
title = "Drill Down",
action = function(e) {
leafletProxy(e$map) %>%
setView(e$latlng, zoom = 10) %>%
addPopup(e$latlng, paste0(
"State: ", e$feature$properties$name,
"<br>Population: ", e$feature$properties$pop
))
}
)
# Install required packages if not already installed
# install.packages("leaflet")
# install.packages("htmlwidgets")
library(leaflet)
# Create a simple map
map <- leaflet() %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Define the drill-down layer
drillLayer <- leaflet() %>%
addTiles() %>%
addMarkers(lng = c(-95.7129, -122.4194),
lat = c(37.0902, 39.8282),
label = c("Houston, TX", "San Francisco, CA"),
popup = c("Population: 2,320,268", "Population: 883,305")) %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Create the drill-down map
map <- map %>% addLayersControl(
overlayGroups = c("Drill-Down"),
options = layersControlOptions(collapsed = FALSE)
)
# Define a shiny app to showcase the map
shinyApp(
ui = fluidPage(
leafletOutput("map")
),
server = function(input, output) {
output$map <- renderLeaflet({
map
})
}
)
# Install required packages if not already installed
# install.packages("leaflet")
library(leaflet)
# Create a simple map
map <- leaflet() %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Define the drill-down layer
drillLayer <- leaflet() %>%
addTiles() %>%
addMarkers(lng = c(-95.7129, -122.4194),
lat = c(37.0902, 39.8282),
label = c("Houston, TX", "San Francisco, CA"),
popup = c("Population: 2,320,268", "Population: 883,305")) %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Add the drill-down layer to the main map
map <- addLayersControl(
map,
overlayGroups = c("Drill-Down"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
map
# Install required packages if not already installed
# install.packages("leaflet")
library(leaflet)
# Create a simple map
map <- leaflet() %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Define the drill-down layer
drillLayer <- leaflet() %>%
addTiles() %>%
addMarkers(lng = c(-95.7129, -122.4194),
lat = c(37.0902, 39.8282),
label = c("Houston, TX", "San Francisco, CA"),
popup = c("Population: 2,320,268", "Population: 883,305")) %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Add the drill-down layer to the main map
map <- addLayersControl(
map,
overlayGroups = "Drill-Down",
options = layersControlOptions(collapsed = FALSE)
)
# Render the map
map <- htmltools::tagList(map, drillLayer)
htmlwidgets::saveWidget(map, "drilldown_map.html", selfcontained = TRUE)
# Install required packages if not already installed
# install.packages("leaflet")
library(leaflet)
# Create a simple map
map <- leaflet() %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Define the drill-down layer
drillLayer <- leaflet() %>%
addTiles() %>%
addMarkers(lng = c(-95.7129, -122.4194),
lat = c(37.0902, 39.8282),
label = c("Houston, TX", "San Francisco, CA"),
popup = c("Population: 2,320,268", "Population: 883,305")) %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Add the drill-down layer to the main map
map <- addLayersControl(
map,
overlayGroups = "Drill-Down",
options = layersControlOptions(collapsed = FALSE)
)
# Render the map
map <- htmltools::tagList(map, drillLayer)
map
# Create a simple map
map <- leaflet() %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Define the drill-down layer
drillLayer <- leaflet() %>%
addTiles() %>%
addMarkers(lng = c(-95.7129, -122.4194),
lat = c(37.0902, 39.8282),
label = c("Houston, TX", "San Francisco, CA"),
popup = c("Population: 2,320,268", "Population: 883,305")) %>%
setView(lng = -98.5795, lat = 39.8282, zoom = 4)
# Add the drill-down layer to the main map
map <- addLayersControl(
map,
overlayGroups = "Drill-Down",
options = layersControlOptions(collapsed = FALSE)
)
map
git init
